<?php

/**
 * @file
 * Contains custom_recurly.module functionality.
 */
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_alter().
 */
function custom_recurly_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  //subscription plan form of the drupal
  if ($form_id == 'recurly_subscription_plans_form' && !empty($form['recurly_subscription_plans'])) {
    //add the plan text message to all the plans
    $existing_plans = \Drupal::config('recurly.settings')->get('recurly_subscription_plans');
    $form['recurly_subscription_plans']['#header']['text_of_subscription'] = t("Plan Text");
    unset($form['recurly_subscription_plans']['#header']['operations']);
    foreach ($form['recurly_subscription_plans'] as $key => $value) {
      $defaultValue = !empty($existing_plans[$key]['text_of_subscription']) ? $existing_plans[$key]['text_of_subscription'] : '';
      if (substr($key, 0, 1) !== "#") {
        unset($form['recurly_subscription_plans'][$key]['operations']);
        $form['recurly_subscription_plans'][$key]['text_of_subscription'] = [
          '#type' => 'textfield',
          '#default_value' => $defaultValue,
          '#maxlength' => 512,
        ];
      }
    }
    $form['#submit'][] = '_save_subscription_plan';
  } elseif ($form_id == 'recurlyjs_subscribe') {
    //payment page of the recurly
    $form['billing']['vat_number']['#access'] = FALSE;
    $form['#submit'][] = '_recurly_js_subscribe_alter';
  } elseif ($form_id == 'recurlyjs_update_billing') {
    //update billing form
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions']['submit']['#submit'][] = '_recurly_js_billing_redirect_alter';
      }
    }

  }
}

/*
 * Save all subscription plan to our database
 */
function _save_subscription_plan(array &$form, FormStateInterface $form_state) {
  $all_plans = recurly_subscription_plans();
  $data = serialize($all_plans);

  $getSetting = \Drupal::database()->select('recurly_settings', 'rs');
  $getSetting->addField('rs', 'data');
  $getSetting->condition('name', 'recurly_subscription_plans');
  $settingData = $getSetting->execute()->fetchField();
  if (!empty($settingData)) {
    $result = \Drupal::database()->update('recurly_settings')
      ->fields(array(
        'data' => $data,
      ))
      ->condition("name", "recurly_subscription_plans")
      ->execute();
  } else {
    $result = \Drupal::database()->insert('recurly_settings') // Table name no longer needs {}
      ->fields(array(
        'name' => "recurly_subscription_plans",
        'data' => $data,
      ))
      ->execute();
  }

}

/**
 * Implements hook_theme().
 */
function custom_recurly_theme() {
  $items['custom_recurly_subscription_plan_select'] = [
    'variables' => [
      'plans' => NULL,
      'entity_type' => NULL,
      'entity' => NULL,
      'currency' => NULL,
      'mode' => 'signup',
      'subscriptions' => NULL,
      'subscription_id' => NULL,
    ],
    'template' => 'custom-recurly-subscription-plan-select',
    // The $mode of "change" or "signup" may be appended to the template name.
    'pattern' => 'custom-recurly-subscription-plan-select__',
  ];

  $items['recurly_payment_info'] = [
    'variables' => [
      'exp' => NULL,
      'accnum' => NULL,
      'card_type' => NULL,
      'uid' => NULL,
    ],
  ];
  return $items;
}

/*
 * Get all subscription Plans from the drupal database
 */
function _get_all_subscription_plans() {
  $plan = \Drupal::database()->select('recurly_settings')
    ->fields('recurly_settings')
    ->condition("name", "recurly_subscription_plans")
    ->execute()
    ->fetchAssoc();
  return !empty($plan['data']) ? unserialize($plan['data']) : [];
}

/**
 * Implements hook_preprocess_recurly_subscription_plan_select().
 *
 * Shared preprocess function for the presentation of the signup & change page.
 */
function template_preprocess_custom_recurly_subscription_plan_select(&$variables) {
  \Drupal::service('custom_recurly.recurly_preprocess')->preprocessRecurlySubscriptionPlanSelect($variables);
}

/*
 * Redirect alter after payment successfully payment
 */
function _recurly_js_subscribe_alter(array $form, FormStateInterface $form_state) {
  $urlPath = '/payment/' . $form['#plan_code'] . '/completed';
  $url = \Drupal\Core\Url::fromUserInput($urlPath);
  //if user has subscribed for the free trail then redirect to the thank you page of free trail else thank page of subscribed user
  if ($form['#entity']->field_user_subscription->getString() && $form['#entity']->field_user_subscription->getString() == 'free') {
    $url->setRouteParameter("type", "free");
  }
  //if gclid is set in the url
  if (\Drupal::request()->query->get('gclid')) {
    $url->setRouteParameter('gclid', \Drupal::request()->query->get('gclid'));
  }
  $form_state->setRedirectUrl($url);
}

/*
 * Redirect alter after billing update
 */
function _recurly_js_billing_redirect_alter(array &$form, FormStateInterface &$form_state) {
  $route_match = \Drupal::service('current_route_match');
  $uid = $route_match->getParameter('user')->get('uid')->value;
  $urlPath = '/user/' . $uid . '/membership';
  $url = \Drupal\Core\Url::fromUserInput($urlPath);
  drupal_set_message('Billing information updated.');
  $form_state->setRedirectUrl($url);
}

/*
 * Implements hook_page_attachments().
 *
 * For adding the validation on the payment and update billing form 
 */
function custom_recurly_page_attachments(array &$page) {
  $routeName = \Drupal::routeMatch()->getRouteName();
  if ($routeName == 'entity.user.recurlyjs_signup' || $routeName == 'entity.user.recurlyjs_billing' || $routeName == 'recurly__subscription.recurly_subscription_plans') {
    $page['#attached']['library'][] = 'custom_recurly/formValidation';
  }
}
